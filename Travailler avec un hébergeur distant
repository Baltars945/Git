Travailler avec un hébergeur Git distant

Faire un fork du dépôt https://github.com/rose-line/sio1-2024-java-grpa (pas par commande Git, c'est sur l'interface GitHub)
Cloner localement votre fork (ne pas cloner le dépôt original)
Quelle est la différence entre un fork et un clonage ?

Un fork créer une copie nouvelle du repository copier un clone sera toujours partager par les dév qui y ont contribuer
 
Indiquer dans quelles circonstances on voudrait forker et/ou cloner un dépôt

 
Modifier le fichier README.md à la racine du dépôt en ajoutant une ligne quelconque
On veut maintenant envoyer cette modification vers le dépôt distant
Il faut d'abord faire un add/commit local
Puis utiliser la commande qui « pousse » les modifs sur le dépôt GitHub (push)
Vérifier directement sur GitHub que le push a bien fonctionné

Trouver la commande qui affiche le nom du ou des dépôt(s) distant(s) relié(s) avec le dépôt local : cela permet de savoir si le dépôt courant est synchronisé avec un dépôt en ligne ou non

git remote 

Merge en local puis push :
Créer une branche locale bugfix1, se déplacer dessus, créer un nouveau fichier ok.java à la racine du dépôt

git branch bugfix1
git checkout bugfix1
touch ok.java

Ajouter ok.java à l'index et faire un commit

git commit -m "ajout de ok.java"

Retourner sur master, créer le fichier ajout.java, ajouter à l'index et commit

git checkout master
touch ajout.java

Fusionner la branche bugfix1 dans la branche master

git merge bugfix1

Afficher le log des commits ; noter les emplacements des trois branches différentes, en local et en remote

commit f60314dd7d7db9077e9a41da6f401d522d1c70e7 (HEAD -> bugfix1)
Merge: 6f20a3b 7a1673a
Author: Yann_Laurent <114476848+Baltars945@users.noreply.github.com>
Date:   Tue Jan 31 09:17:53 2023 +0100

    Merge branch 'master' into bugfix1

commit 7a1673af6bb7d7aaf098c6fa70cbd21077b9ad54 (master)
Author: Yann_Laurent <114476848+Baltars945@users.noreply.github.com>
Date:   Tue Jan 31 09:17:42 2023 +0100

    ajout de ajout.java

commit 6f20a3b59e2ffc782c499c0d82c2dd90a9c53546
Author: Yann_Laurent <114476848+Baltars945@users.noreply.github.com>
Date:   Tue Jan 31 09:16:52 2023 +0100

    réajout de ok.java

Faire un push

git push  

Refarire un affichage du log ; origin/master a bougé : que représente cette branche ?

origin/master représente le master sur le remote git, il est donc à jour  

Étudier le résultat sur GitHub, en examinant commits et branches (bouton drop-down sur la page du dépôt pour voir les branches) : qu'est-ce qui est différent de la version locale ?

Le bug est corrigé et intégré ; que doit-on faire de la branche bugfix1 maintenant ?

on peut le supprimer pour ordonner les branch 

Supposons que l'on veuille effectivement publier sur le remote une branche sur laquelle on travaille (pour sauvegarde ou pour que d'autres puissent l'utiliser)
Créer une nouvelle branche partage

git branch partage 

Aller sur la branche

git checkout partage 

Ajouter un fichier partage.md

touch partage.md 

L'inclure dans l'index

git add partage.md

Faire un commit

git commit -m "ajout de partage"

Push

git push

git push
fatal: La branche courante partage n'a pas de branche amont.
Pour pousser la branche courante et définir la distante comme amont, utilisez

    git push --set-upstream origin partage
    
Que se passe-t-il ?

la branch n'existe pas sur le remote donc on ne peut push

Exécuter la bonne commande pour sauvegarder la branche sur le remote

git push --set-upstream origin partage 

Vérifier sur GitHub que la branche apparaît bien
La branche partage n'a pas été fusionnée avant le push ; on va utiliser un autre moyen offert par GitHub pour fusionner une branche en remote : la Pull Request
La Pull Request est très utilisée en collaboration : elle permet à l'intégrateur du projet d'examiner les demandes de merge au niveau du remote avant de les accepter (ou non)
Sur GitHub, cliquer sur Pull Request
À gauche, la branche d'intégration (« base », qui reçoit le merge) ; à droite, la branche à fusionner (« compare »)
On doit fusionner ^partage dans master
Si, avant, GitHub vous demande de choisir un repo de base, bien prendre celui qui est sur votre propre compte
Cliquer sur Create Pull Request
Le nouveau formulaire vous permet d'ajouter des informations : titre et commentaire de la pull request, et même upload de fichiers annexes, liens éventuels... Également, on peut ajouter des labels pour étiquetter la pull request et lui affecter un reviewer, qui va officiellement être en charge
Valider
La page résultante informe sur les branches source et cible, sur les commits concernés, les fichiers qui ont été modifiés...
On peut aussi y démarrer une conversation notamment entre l'émetteur de la pull request et l'intégrateur
En discutant de la pull request, on se rend compte que certaines choses devraient être modifiées
Repartir en local pour effectuer une modification sur partage.md et ajouter precision.md
Commit des deux modifs

git add partage.md precision.md

Push

git push

Observer la pull request : que s'est-il passé ?

on voit les commits effectuer
 
Finalement, faire le merge sur la page de la pull request
Noter que l'interface nous propose alors de supprimer la branche devenue inutile ; supprimer la branche
Dans un contexte de travail en collaboration s	ur un même dépôt, donner un workflow (façon de travailler) possible qui va permettre à tous les intervenants de viser des ajouts à la branche d'intégration, d'en discuter, et ceci sans danger pour la branche d'intégration, avant que finalement l'intégrateur (probablement propriétaire du dépot) accepte les changements
