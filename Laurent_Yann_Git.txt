Travail à faire
Ouvrir un terminal (terminal Git Bash à privilégier)
Créer, en ligne de commande, un répertoire tp-git

mkdir tp-git

Se déplacer dans le répertoire

cd ./tp-git

Vérifier qu'on est dans le bon répertoire en affichant le chemin du répertoire courant

pwd 

Initialiser un dépôt Git

git init

Lister tous les fichiers du répertoire (y compris les fichiers cachés) pour s'assurer que le répertoire .git à été créé

ls -a

Ouvrir ce répertoire sous VS Code
Exécuter git status et copier/coller la sortie

yann@yann-HP-Laptop-17-cp0xxx:~/Documents/Cours/Informatique/Baltars945.Yann/tp-git$ git status
Sur la branche master

Aucun commit

rien à valider (créez/copiez des fichiers et utilisez "git add" pour les suivre)

Créer le fichier fichier1.md avec un contenu quelconque et l'enregistrer

touch fichier1.md

Créer le fichier fichier2.md avec un contenu quelconque et l'enregistrer

touch fichier2.md

Exécuter git status et copier/coller la sortie

yann@yann-HP-Laptop-17-cp0xxx:~/Documents/Cours/Informatique/Baltars945.Yann/tp-git$ git status
Sur la branche master

Aucun commit

Fichiers non suivis:
  (utilisez "git add <fichier>..." pour inclure dans ce qui sera validé)
        fichier1.md
        fichier2.md

aucune modification ajoutée à la validation mais des fichiers non suivis sont présents (utilisez "git add" pour les suivre)

Ajouter fichier1.md à l'index de Git (zone de Staging)

git add fichier1.md 

Exécuter git status et copier/coller la sortie

yann@yann-HP-Laptop-17-cp0xxx:~/Documents/Cours/Informatique/Baltars945.Yann/tp-git$ git status
Sur la branche master

Aucun commit

Modifications qui seront validées :
  (utilisez "git rm --cached <fichier>..." pour désindexer)
        nouveau fichier : fichier1.md

Fichiers non suivis:
  (utilisez "git add <fichier>..." pour inclure dans ce qui sera validé)
        fichier2.md

Créer un commit avec pour message : "Ajout de fichier1.md"

git commit -m 'Ajout de fichier1.md'
[master (commit racine) 2456168] Ajout de fichier1.md
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 fichier1.md
 
Exécuter git status et copier/coller la sortie

git status
Sur la branche master
Fichiers non suivis:
  (utilisez "git add <fichier>..." pour inclure dans ce qui sera validé)
        fichier2.md

aucune modification ajoutée à la validation mais des fichiers non suivis sont présents (utilisez "git add" pour les suivre)

Modifier fichier1.md et enregistrer

nano fichier1.md

Exécuter git status et copier/coller la sortie

yann@yann-HP-Laptop-17-cp0xxx:~/Documents/Cours/Informatique/Baltars945.Yann/tp-git$ git status
Sur la branche master
Modifications qui ne seront pas validées :
  (utilisez "git add <fichier>..." pour mettre à jour ce qui sera validé)
  (utilisez "git restore <fichier>..." pour annuler les modifications dans le répertoire de travail)
        modifié :         fichier1.md

Fichiers non suivis:
  (utilisez "git add <fichier>..." pour inclure dans ce qui sera validé)
        fichier2.md

aucune modification n'a été ajoutée à la validation (utilisez "git add" ou "git commit -a")

Ajouter fichier1.md et fichier2.md à la zone de Staging

git add fichier1.md
git add fichier2.md

Créer un commit "Ajout de fichier2.md et modification de fichier1.md"

git commit -m 'Ajout de fichier2.md et modification de fichier1.md'
[master 9f84ad3] Ajout de fichier2.md et modification de fichier1.md
 2 files changed, 1 insertion(+)
 create mode 100644 fichier2.md
 
Copier/coller l'ID des deux premiers commits :
ID commit 1 :9f84ad3521e5e59c28566162463193cf02572419
ID commit 2 :245616887b9ef2eb0f33d2442aa5e5a6a8c376a1
Que signifie qu'un fichier est "tracked" ou "untracked" ?

untracked signifie que les changements ne seront pas sauvegarder et tracked qu'ils le seronts
 
Pourquoi doit-on passer les fichiers par la zone de Staging (l'index) avant de les committer ?



Créer une branche fonctionnalite1

git branch fonctionnalite1

Lister les branches

 git branch
  fonctionnalite1
* master

Se déplacer sur la branche fonctionnalite1

git checkout fonctionnalite1

Lister les branches

git branch 
* fonctionnalite1
  master
  
Que représente l'étoile à côté des noms des branches ?

L'étoile représente ce qu'on cible /le head 

Créer un nouveau fichier fichier3.md

touch fichier3.md

Modifier le fichier fichier2.md

nano fichier2.md

Comment utiliser VS Code pour qu'il nous montre les différences entre l'ancienne version de fichier2.md et la version courante que l'on vient d'éditer ?

on peut utiliser "git diff" pour Affiche les différences entre les fichiers indexés et les fichiers modifiés.

Committer ces deux modifications : "Fonctionnalité 1 - première phase"

git add fichier2.d fichier3.md
git commit -m "Fonctionnalité 1 - première phase"

Créer un nouveau fichier fichier4.md

touch fichier4.md

Modifier de nouveau le fichier fichier2.md

nano fichier2.md

Committer ces deux modifications : "Fonctionnalité 1 - terminée"

git add fichier2.md fichier4.md
git commit -m "Fonctionnalité 1 - terminée"

Afficher la liste des fichiers du répertoire

ls
fichier1.md  fichier2.md  fichier3.md  fichier4.md

Se déplacer sur la branche master

 git checkout master 
Basculement sur la branche 'master'

Afficher la liste des fichiers du répertoire

ls
fichier1.md  fichier2.md

Pourquoi les deux sorties sont-elles différentes ? Les fichiers ont-ils disparus ?

les modification on été réalisé sur fonctionnalite1 et pas sur master donc ils non pas disparu

Créer une nouvelle branche fonctionnalite2

git branch fonctionnalite2

Cette branche ne va pas avoir toutes les données incluses dans fonctionnalite1. Pourquoi ?

Elle a été créer sur master donc contient le même contenu que master donc ne contient pas le contenu de fonctionnalite1

Qu'aurait-il fallu faire si on avait souhaité démarrer la branche fonctionnalite2 en intégrant les modifications récentes de fonctionnalite1 ?

il aurait fallu créer la branch fonctionnalite2 depuis fonctionnalite1 pour contenir ses changement

Se déplacer sur la nouvelle branche fonctionnalite2

git checkout fonctionnalite2

Créer un nouveau fichier fichier5.md

touch fichier5.md

Faire un commit intégrant cette ajout : "Ajout fichier5.md"

git commit -m "Ajout fichier5.md"

Entrer la commande git log --oneline --decorate --graph --all pour visualiser, sur le terminal, le graphe des commits sur toutes les branches
Noter la « déviation » entre les deux branches, à partir de la branche master

Installer l'extension VS Code Git Graph et visualiser le graphe actuel des commits à l'aide de cette extension
Sur cette représentation, que représente les points ?

Les points représentes les les commits

Comment voit-on sur quelle branche on est actuellement ?

Elle aura ses contour de couleur bleu lorsqu'on est dessus

On considère que la branche originale (master ou main) est la branche d'intégration, c'est-à-dire celle qui va contenir l'historique de toutes les modifications développées au fur et à mesure dans les branches annexes
On va maintenant fusionner la branche fonctionnalite1, qui est terminée, avec la branche d'intégration
Se déplacer sur la branche master

git checkout master 

Noter le changement dans l'onglet Git Graph
Fusionner avec la branche fonctionnalite1

git merge fonctionnalite1
Mise à jour 9f84ad3..a6d1f9e
Fast-forward
 fichier2.md | 1 +
 1 file changed, 1 insertion(+)
 
Noter le changement dans l'onglet Git Graph. Que signifie la mention Fast-forward indiquée par la sortie de la commande ?

Fast foward signifie que le chemin entre la branche actuelle et visée est linéaire 

On veut maintenant fusionner fonctionnalite2 dans la branche d'intégration (master)
Effectuer cette fusion

Merge made by the 'ort' strategy.
 fichier2.md | 1 +
 fichier3.md | 0
 fichier4.md | 0
 3 files changed, 1 insertion(+)
 create mode 100644 fichier3.md
 create mode 100644 fichier4.md
 
Noter le changement dans l'onglet Git Graph. Que signifie la mention Merge made by the ... strategy indiquée par la sortie de la commande ?
Quelle est la différence fondamentale avec la fusion précédente ?

Au lieu d'avancer dans "l'aborescence" on a reculer 

Créer une nouvelle branche fonctionnalite3, se déplacer dessus, et modifier le fichier fichier1.md en y ajoutant une ligne de texte. Committer : "Modification fichier1 pour fonctionnalité 3"

Comment utiliser Git Graph pour qu'il nous montre les différences entre l'ancienne version de fichier1.md et la version courante que l'on vient de committer ?
Repartir sur master, et modifier fichier1.md en y ajoutant aussi une ligne (différente de celle qu'on a ajoutée sur l'autre branche)
Tenter de fusionner la branche fonctionnalite3 avec master
Que se passe-t-il et pourquoi ?

Mise à jour 5d0848c..fd3638f
error: Vos modifications locales aux fichiers suivants seraient écrasées par la fusion :
        fichier1.md
Veuillez valider ou remiser vos modifications avant la fusion.
Abandon

Lancer un git status

git status
Sur la branche fonctionnalite3
Vous avez des chemins non fusionnés.
  (réglez les conflits puis lancez "git commit")
  (utilisez "git merge --abort" pour annuler la fusion)

Modifications qui seront validées :
        nouveau fichier : fichier3.md
        nouveau fichier : fichier4.md
        nouveau fichier : fichier5.md

Chemins non fusionnés :
  (utilisez "git add <fichier>..." pour marquer comme résolu)
        modifié des deux côtés :  fichier1.md
        
Que doit-on faire si on veut annuler la fusion en cours ?

Résoudre le conflit entre le fichier1 de la branche master et le fichier1 de la branche fonctionnalite3

On veut résoudre le conflit. Plusieurs possibilités :
Conserver uniquement les modifications faites dans fonctionnalite3
Conserver uniquement les modifications faites dans master
Conserver les deux modifications
Supprimer les deux modifications ou remanier sensiblement le fichier pour les intégrer correctement
Git nous laisse totalement la main et ne va pas essayer d'imposer l'un de ces choix pour nous, ni nous assister dans l'application automatique de l'un d'entre eux : il faut examiner le(s) fichier(s) en conflit et éditer nous-mêmes
Ouvrir le fichier en question sous VS Code
La chaîne <<<<<<<<<< marque le début du conflit
La chaîne >>>>>>>>>> marque la fin du conflit
La chaîne ========== sépare les deux versions
Éditer le fichier pour faire en sorte d'intégrer les deux modifications ; à la fin de l'édition :
Sauvegarder
Il ne doit plus y avoir de marques quelconques en dehors des ajouts fonctionnels originaux, c'est-à-dire pas de <<<<<<<<<<, ni de mentions de nom de branche, etc. : vous rendez le fichier tel qu'il doit apparaître dans le commit de fusion, avec les conflits résolus manuellement
Ajouter les modification à l'index et committer
NB : parfois, plusieurs fichiers sont en conflit ; le processus est identique, il faut juste résoudre les conflits sur tous les fichiers
NB : les conflits de fusion sont fréquents lorsqu'on travaille en collaboration (plusieurs personnes vont travailler sur le même fichier pour remplir deux fonctionnalités différentes)
Les branches créées n'ont plus de raison d'exister
Elles avaient pour but de créer une déviation afin de travailler sur des fonctionnalités individuelles
On va vouloir nettoyer le dépôt en les supprimant
Cela ne va bien sûr pas supprimer tous les commits qui y sont associés
Attention cependant d'éviter en général de supprimer une branche qui n'a pas encore été intégrée à la branche d'intégration, sauf on souhaite vraiment abandonner le développement de cette branche
Ne pas réutiliser une branche qui a déjà été intégrée pour démarrer une nouvelle piste : toujours utiliser une nouvelle branche
Nouvelle tâche ? => nouvelle branche à partir d'un commit de la branche d'intégration (en général le plus récent)
Tâche terminée ? => fusion dans la branche d'intégration et suppression de la branche
Supprimer les trois branches fonctionnalitex (attention : on ne peut pas supprimer une branche sur laquelle on est)
Footer
© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing

